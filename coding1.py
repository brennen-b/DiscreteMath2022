# -*- coding: utf-8 -*-
"""coding1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dEz-MWapmQVOujdavCgKGwOk9kDYKPoz
"""

import array

# COMS3203 DISCRETE MATHEMATICS
# CODING ASSIGNMENT 1

# YOUR NAME(s): Brennen Bickford
# YOUR UNI(s): btb2125

'''
Returns whether the first letter of string s is a vowel.

Parameters:
s (string): lowercase string without spaces, numbers, or special characters.

Returns:
bool: True if starts with a vowel, False otherwise
'''
def is_vowel(s):

    if s.startswith('a') or s.startswith('e') or s.startswith('i') or s.startswith('o') or s.startswith('u') :
      vowel_start = True 
    else:
      vowel_start = False 

    return vowel_start # bool

'''
Returns the pig-latin equivalent of a given string s.

Parameters:
s (string): lowercase string without spaces, numbers, or special characters.

Returns:
str: pig-latinized word
'''
def piggify(s):
    s2 = s[1:]

    if (is_vowel(s)== False and is_vowel(s2)== True):#case 1
        pig_latinized = s2 + s[0] + "ay"
    
    elif(is_vowel(s)== False and is_vowel(s2)==False):
        s2 = s[2:] #case 2
        pig_latinized = s2 + s[0] + s[1] + "ay"
      
    else:
        pig_latinized = s + "way" #case 3
     

    return pig_latinized #str

'''
Returns the pig-latin equivalent of a sentence.

Parameters:
sentence (string): A string of a sentence.

Returns:
str: the pig-latinized senetence.
'''
def piggify_sentence(sentence):
  s3 = sentence.split()
  lst =[]

  for x in range(len(s3)):
    t = s3[x]
    symbols = False
    beginning = False

    if (t[len(t)-1] == ','):
        id = len(t)-1 # check for symbol
        chr = t[len(t)-1]
        symbols = True
        t=t.replace(',','')

    if (t[len(t)-1] == '?'):
        id = len(t)-1 # check for symbol
        chr = t[len(t)-1]
        symbols = True
        t=t.replace('?','')

    if (t[len(t)-1] == '!'):
        id = len(t)-1 # check for symbol
        chr = t[len(t)-1]
        symbols = True
        t=t.replace('!','') 

    if (t[len(t)-1] == '.'):
        id = len(t)-1 # check for symbol
        chr = t[len(t)-1]
        symbols = True
        t=t.replace('.','')


    t= piggify(t.lower())

    if (symbols == True and beginning == True):
      t = chr + t
      lst.append(t)
    elif(symbols == True):
      t = t + chr
      lst.append(t)
    else:
      lst.append(t)


  piggied_sentence = " ".join(lst)

  return piggied_sentence #str


'''
Returns a code decoder dictionary

Parameters:
secret_alphabet (string): a 26 letter string of unique characters without spaces.

Returns:
dict: a dictionary mapping from each secret language letter to its english alphabet equivalent.
'''
def create_code(secret_alphabet):
    decoder = {}
    for i in range(len(secret_alphabet)):
      decoder[secret_alphabet[i]]= chr(97+i)

    return decoder # dict

'''
Returns the decoded version of a string using a decoder dictionary

Parameters:
decoder (dict): a dictionary mapping from each secret language letter to its english alphabet equivalent.
encoded_word (str): a string made up only of characters in the secret language.

Returns:
str: the decoded word.
'''
def decode(decoder, encoded_word):
   decoded_word = ''

   for i in range(len(encoded_word)):
     t = encoded_word[i]
     t = decoder[t]
     decoded_word= decoded_word + t

   return decoded_word # str

'''
Returns an integer that is the nth Fibonacci number.

Parameters:
n (int): The nth Fibonacci number you want.

Returns:
int: the nth fibonacci number.
'''
def recursive_fib(n):
  if (n<=1):
    return n;
  else:
      return recursive_fib(n-1) +recursive_fib(n-2)

  #  return fib_n # int

'''
Returns an integer that is the nth Fibonacci number.

Parameters:
n (int): The nth Fibonacci number you want.

Returns:
int: the nth fibonacci number.
'''
def iterative_fib(n):

    arr = array.array('i',[0,1])
    

    if (n==0):
      return 0
    if (n==1):
      return 1

    for i in range(1,n):
      b = arr[i] + arr[i-1]
      arr.append(b)

    fib_n = arr[n]
    return fib_n # int

######################################################################
### DO NOT TURN IN AN ASSIGNMENT WITH ANYTHING BELOW HERE MODIFIED ###
######################################################################
if __name__ == '__main__':
  print("#######################################")
  print("Welcome to Coding 1: Python Introduction!")
  print("#######################################")
  print()

  print("---------------------------------------")
  print("PART A: Pig-Latin and Codes")
  print("---------------------------------------")
  
  print("---------------------------------------")
  print("\'is_vowel\' Tests")
  print("---------------------------------------")
  
  is_vowel_tests = ['apple', 'cake', '...hi', 'eating']
  is_vowel_answers = [True, False, False, True]
  
  for count, test in enumerate(is_vowel_tests):
    if (is_vowel(is_vowel_tests[count]) == is_vowel_answers[count]):
       passed = 'PASSED!'
    else:
      passed = "FAILED!"
    
    print("Test #{}: {}".format(count + 1, passed))
    print(f'Correct Answer: {is_vowel_answers[count]}')
    print(f'Your Answer: {is_vowel(is_vowel_tests[count])}')
      
      
  print("---------------------------------------")
  print("\'piggify\' Tests")
  print("---------------------------------------")
  
  piggify_tests = ['cake', 'icecream', 'treat', 'apple', 'walk']
  piggify_answers = ['akecay', 'icecreamway', 'eattray', 'appleway', 'alkway']
  
  for count, test in enumerate(piggify_tests):
    if (piggify(piggify_tests[count]) == piggify_answers[count]):
       passed = 'PASSED!'
    else:
      passed = "FAILED!"
    
    print("Test #{}: {}".format(count + 1, passed))
    print(f'Correct Answer: {piggify_answers[count]}')
    print(f'Your Answer: {piggify(piggify_tests[count])}')
      
  print("---------------------------------------")
  print("\'piggify_sentence\' Tests")
  print("---------------------------------------")
  
  piggify_sentence_tests = ['The boy, Sam, walked to the store.', 'Hello, how are you?', \
                          'Discrete math is so much fun!']
  
  piggify_sentence_answers = ['ethay oybay, amsay, alkedway otay ethay orestay.', \
                             'ellohay, owhay areway ouyay?', \
                             'iscreteday athmay isway osay uchmay unfay!']
    
  for count, test in enumerate(piggify_sentence_tests):
    if (piggify_sentence(piggify_sentence_tests[count]) == piggify_sentence_answers[count]):
       passed = 'PASSED!'
    else:
      passed = 'FAILED!'
    
    print("Test #{}: {}".format(count + 1, passed))   
    print(f'Correct Answer: {piggify_sentence_answers[count]}')
    print(f'Your Answer: {piggify_sentence(piggify_sentence_tests[count])}')
      
  print("---------------------------------------")
  print("\'create_code\' Tests")
  print("---------------------------------------")
      
  alphabet_1 = 'Hh!@mbM*()QWERTYUIOPASDFGZ'
  decoder_1={'H': 'a', 
             'h':'b',
             '!':'c',
             '@': 'd', 
             'm': 'e', 
             'b': 'f',
             'M': 'g', 
             '*': 'h', 
             '(': 'i',
             ')':'j',
             'Q': 'k', 
             'W': 'l', 
             'E':'m',
             'R': 'n', 
             'T': 'o', 
             'Y':'p', 
             'U': 'q', 
             'I':'r',
             'O': 's', 
             'P':'t',
             'A':'u',
             'S':'v', 
             'D': 'w', 
             'F': 'x', 
             'G': 'y',
             'Z': 'z'}
  
  alphabet_2 = 'Hh!@mbM*()qwertyUIOPAS5FGZ'
  decoder_2={'H': 'a', 
            'h':'b',
            '!':'c',
            '@': 'd', 
            'm': 'e', 
            'b': 'f',
            'M': 'g', 
            '*': 'h', 
            '(': 'i',
            ')':'j',
            'q': 'k', 
            'w': 'l', 
            'e':'m',
            'r': 'n', 
            't': 'o', 
            'y':'p', 
            'U': 'q', 
            'I':'r',
            'O': 's', 
            'P':'t',
            'A':'u',
            'S':'v', 
            '5': 'w', 
            'F': 'x', 
            'G': 'y',
            'Z': 'z'}
  
  create_code_tests = [alphabet_1, alphabet_2]
  create_code_answers = [decoder_1, decoder_2]
  
  for count, test in enumerate(create_code_tests):
    if (create_code(create_code_tests[count]) == create_code_answers[count]):
       passed = "PASSED!"
    else:
      passed = "FAILED!"
      
    print("Test #{}: {}".format(count + 1, passed)) 
    print(f'Correct Answer: {create_code_answers[count]}')
    print(f'Your Answer: {create_code(create_code_tests[count])}')
      
  print("---------------------------------------")
  print("\'decode\' Tests")
  print("---------------------------------------")
  
  decode_tests = [[decoder_1, '@TM'], [decoder_2, '!HP']]
  decode_answers = ['dog', 'cat']
  
  for count, test in enumerate(decode_tests):
    if (decode(decode_tests[count][0], decode_tests[count][1]) == decode_answers[count]):
       passed = 'PASSED!'
    else:
      passed = 'FAILED!'
      
    print("Test #{}: {}".format(count + 1, passed))
    print(f'Correct Answer: {decode_answers[count]}')
    print(f'Your Answer: {decode(decode_tests[count][0], decode_tests[count][1])}')
    

    print()
    print("---------------------------------------")
    print("PART B: Fibonacci")
    print("---------------------------------------")
    tests = [[1, 1], [4, 4], [10, 10]]
    answers = [[1, 1], [3, 3], [55, 55]]
    for count, test in enumerate(tests):
        if(answers[count][0] == recursive_fib(test[0]) and
            answers[count][1] == iterative_fib(test[1])):
            passed = "PASSED!"
        else:
            passed = "FAILED!"

        print("Test #{}: {}".format(count + 1, passed))
        print("Recursive Fibonacci (Correct): ", answers[count][0])
        print("Recursive Fibonacci (Your Answer): ", recursive_fib(test[0]))
        print("Iterative Fibonacci (Correct): ", answers[count][1])
        print("Iterative Fibonacci (Your Answer): ", iterative_fib(test[1]))