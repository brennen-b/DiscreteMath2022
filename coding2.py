# -*- coding: utf-8 -*-
"""coding2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19PuOOQso9P6xuPR9fZ8zc1swH4Mhkmt6
"""

# COMS3203 DISCRETE MATHEMATICS
# CODING ASSIGNMENT 2
#
# Before submitting the file to gradescope make sure of the following:
# 1. The name of the file is coding2.py 
# 2. Nothing below the line `if __name__="__main__":` is changed 
# 3. Make sure there are no indentation errors and that the code compiles on your
#    end
#
# YOUR NAME: Brennen Bickford 
# YOUR UNI: btb2125
import itertools
'''
Returns the proposition, formatted in string form.
Parameters:
prop (list): proposition in nested list form
Returns:
string: 'prop' in string form
'''
def format_prop(prop): 
    # BASE CASE: #####################################
    if len(prop) ==1:
        return prop[0]

    if 2 == len(prop):
        op = prop[0] 
        rv = prop[1] 
        if "not" == op:
            t = [op,rv[0]]
            formatted_prop = "(" + " ".join(t) + ")"
            return formatted_prop
        else:
            raise ValueError("Unary proposition is not not.")

    elif 3 == len(prop):
        op = prop[0] 
        lv = prop[1] 
        rv = prop[2] 
        if op not in ("if", "iff", "or", "and", "xor"):
            raise ValueError("Binary proposition does not have valid connectives.")

        if "if" == op:
            op = "->"
        elif "iff" == op:
            op = "<->"

        left_prop = format_prop(lv)
        right_prop = format_prop(rv)
        formatted_prop = "(" +  left_prop + " " + op + " " + right_prop + ")"
        return formatted_prop
    ####################################################
    # INVALID LENGTH ####################################
    else:
        raise ValueError("Proposition incorrect length.")
    #####################################################
'''
Returns the evaluation (True or False) as an int (1 or 0) of the proposition,
given a proposition in list form and a list of values for each atomic variable.
Parameters:
prop (list): proposition in nested list form.
values (list): list of integers, either 0 or 1 indicating False or True for
each atomic variable in the proposition. 
Returns:
int: 0 for False, 1 for True
'''
def eval_prop(prop, values):
    # BASE CASE: #####################################
    #print(prop)
    if len(prop)==1:
        atomic_prop_id =  int(prop[0][1]) -1
        return values[atomic_prop_id]

    # UNARY OPERATOR (not): ##########################
    elif 2 == len(prop):
        # the following two variable declarations are missing LHS #
        op = prop[0] # missing LHS
        rv = prop[1] # missing LHS
        if "not" == op:
            return 0
        else:
            raise ValueError("Unary proposition is not not.")
    ##################################################
    # BINARY OPERATOR (and, or, if, iff, xor): #######
    elif 3 == len(prop):
        # the following three variable declarations are missing LHS #
        op = prop[0] 
        lv = prop[1] 
        rv = prop[2] 
        if op not in ("if", "iff", "or", "and", "xor"):
            raise ValueError("Binary proposition does not have valid connectives.")
        left = eval_prop(lv,values)
        right = eval_prop(rv,values)

        if "and" == op:
            return int(left and right)
        elif "or" ==op:
            return int(left or right)
        elif "iff" ==op:
            return int((not left or right) and (not right or left))
        elif "if"==op:
            return int(not left or right)
        else:
            return int((left and not right) or (not left and right))
    # INVALID LENGTH ####################################
    else:
        raise ValueError("Proposition incorrect length.")
    #####################################################
if __name__ == '__main__':
    print("---------------------------------------")
    print("Coding Assignment 2: Propositional Logic")
    print("---------------------------------------")
    print()
    values = [1]
    prop = ["not", ["p1"]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    print("Evaluating proposition p =", format_prop(prop))
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)
    print()
    values = [1, 1]
    prop = ["and", ["p1"], ["p2"]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    print("Evaluating proposition p =", format_prop(prop))
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)
    print()
    values = [1, 0]
    prop = ["iff", ["p1"],["p2"]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    print("Evaluating proposition p =", format_prop(prop))
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)
    print()
    values = [1, 1, 0]
    prop = ["if", ["and", ["p1"], ["not", ["p2"]]], ["p3"]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    prop_str = format_prop(prop)
    print("Evaluating proposition p =", prop_str)
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)
    print()
    values = [1, 0, 1]
    prop = ["iff", ["p1"], ["or", ["p2"], ["not", ["p3"]]]]
    ps_str = " ".join("p{}={}".format(i + 1, v) for i, v in enumerate(values))
    print("Evaluating proposition p =", format_prop(prop))
    prop_val = eval_prop(prop, values)
    print("over", ps_str, ":", prop_val)