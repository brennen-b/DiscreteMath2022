# -*- coding: utf-8 -*-
"""coding3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10juKpWqV2ZTuFG-hbKggj5YBNCafPu2V
"""

#!/usr/bin/env python3
#!/usr/bin/python
# -*- coding: utf-8 -*-
import operator

"""
HW 3
"""

def is_onto (domain, co_domain, mapping):

    list1 = list(mapping.values())
    co_domain.sort()
    list1.sort()

    for i in range (len(co_domain)):
      if (list1.count(co_domain[i])<1):
        meets_definition = False
        return meets_definition

    meets_definition= True
    return meets_definition #bool

def is_one_to_one (domain, co_domain, mapping):
    list1=list(mapping.values())

    for i in range (len(co_domain)):
      if (list1.count(co_domain[i])>1):
        meets_definition = False
        return meets_definition

    meets_definition= True   
    return meets_definition #bool

def is_bijective ( domain , co_domain , mapping ) :

    val1 = is_onto(domain , co_domain , mapping)
    val2= is_one_to_one (domain, co_domain, mapping)

    if (val1 & val2 == True):
        meets_definition= True
        return True
    else:
      meets_definition= False
      return meets_definition #bool


def new_word(my_word, word_bank, used):

    new_list = []
    for i in range (len(word_bank)):
      if len(word_bank[i]) == len(my_word)+1:
        new_list.append(word_bank[i])
  
    for i in range (27):
      letter =  chr(97+i)
      temp_tup = (my_word,my_word + letter)
      if (temp_tup[1] in new_list and temp_tup not in used ):
        tup = (my_word,temp_tup[1])
        used.append(tup)
        return tup    
      temp_tup = (my_word,letter + my_word)
      if (temp_tup[1] in new_list and temp_tup not in used ):
        tup = (my_word,temp_tup[1])
        used.append(tup)
        return tup        

    tup = None
    return tup #tuple or None



def generate_games_main(my_word, word_bank):
############################################################
###        CALL THIS FUNCTION TO SEE POSET OUTPUT        ### 
### THIS FUNCTION RETURNS A LIST OF TUPLES AS YOUR POSET ###
###             DO NOT EDIT THIS FUNCTION!!              ###
############################################################
    poset = []
    used = []
    generate_games(my_word, word_bank, used, poset) 
    return poset



def generate_games(my_word, word_bank, used, poset):
    tupp = (my_word,my_word)
    tupp = new_word(tupp[1], word_bank, used)
    if tupp is None:
      return None
    
    poset.append(tupp)
    generate_games(tupp[0],word_bank,used,poset)
    generate_games(tupp[1],word_bank,used,poset)

    return None


def find_neighbors(poset, word):
    predecessors =[]
    successors = []
    for i in range (len(poset)):
      tuppp = poset[i]
      if (tuppp[0] == word):
        successors.append(tuppp[1])
      if (tuppp[1] == word): 
        predecessors.append(tuppp[0])

    return (predecessors, successors) #tuple of lists



######################################################################
### DO NOT TURN IN AN ASSIGNMENT WITH ANYTHING BELOW HERE MODIFIED ###
######################################################################
if __name__ == '__main__':
    print("#######################################")
    print("Welcome to Coding 3: Functions, Posets, and PHP!")
    print("#######################################")
    print()
    print("---------------------------------------")
    print("PART A: Function Properties")
    print("---------------------------------------")

    example_1 = [[1 ,2 ,3 ,4],[1,2,3,4,5,6,7],{1:2, 2:3, 3:1,4:3}] #not anything
    example_2 = [[1 ,2 ,3 ,4],[1,2,3,4,5,6,7],{1:2, 2:3, 3:1,4:5}] #one to one (nothing else)
    example_3 = [[1 ,2 ,3 ,4],[1,2,3],{1:2, 2:3, 3:1,4:3}] #onto (nothing else)
    example_4 = [[1 ,2 ,3 ,4],[1,2,3,4],{1:2, 2:3, 3:1,4:4}] #bijective
    
    print("---------------------------------------")
    print("\'is_onto\' Tests")
    print("---------------------------------------")
    is_onto_tests = [example_1, example_2, example_3, example_4]
    is_onto_answers = [False, False, True, True]
  
    for count, test in enumerate(is_onto_tests):
        if (is_onto(is_onto_tests[count][0],is_onto_tests[count][1],
                    is_onto_tests[count][2]) == is_onto_answers[count]):
            passed = 'PASSED!'
        else:
            passed = "FAILED!"
        
        print("Test #{}: {}".format(count + 1, passed))
        print(f'Correct Answer: {is_onto_answers[count]}')
        print(f'Your Answer: {is_onto(is_onto_tests[count][0],is_onto_tests[count][1],is_onto_tests[count][2])}')
        
    print("---------------------------------------")
    print("\'is_one_to_one\' Tests")
    print("---------------------------------------")
    is_one_to_one_tests = [example_1, example_2, example_3, example_4]
    is_one_to_one_answers = [False, True, False, True]
  
    for count, test in enumerate(is_one_to_one_tests):
        if (is_one_to_one(is_one_to_one_tests[count][0],is_one_to_one_tests[count][1],
                    is_one_to_one_tests[count][2]) == is_one_to_one_answers[count]):
            passed = 'PASSED!'
        else:
            passed = "FAILED!"
        
        print("Test #{}: {}".format(count + 1, passed))
        print(f'Correct Answer: {is_one_to_one_answers[count]}')
        print(f'Your Answer: {is_one_to_one(is_one_to_one_tests[count][0],is_one_to_one_tests[count][1],is_one_to_one_tests[count][2])}')
    
    print("---------------------------------------")
    print("\'is_bijective\' Tests")
    print("---------------------------------------")
    is_bijective_tests = [example_1, example_2, example_3, example_4]
    is_bijective_answers = [False, False, False, True]
  
    for count, test in enumerate(is_onto_tests):
        if (is_bijective(is_bijective_tests[count][0],is_bijective_tests[count][1],
                    is_bijective_tests[count][2]) == is_bijective_answers[count]):
            passed = 'PASSED!'
        else:
            passed = "FAILED!"
        
        print("Test #{}: {}".format(count + 1, passed))
        print(f'Correct Answer: {is_bijective_answers[count]}')
        print(f'Your Answer: {is_bijective(is_bijective_tests[count][0],is_bijective_tests[count][1],is_bijective_tests[count][2])}')
        
        
    print("---------------------------------------")
    print("PART B: Modeling with Posets")
    print("---------------------------------------")

    sample_word_bank_1 = ['a', 'at', 'cat', 'cats', 'scat', 'scats']
    gg_answers_1 = [('a', 'at'), ('at', 'cat'), ('cat', 'cats'), ('cats', 'scats'), ('cat', 'scat'), ('scat', 'scats')]
    fn_answers_1 = (['at'], ['cats', 'scat'])
    sample_word_bank_2 = ['a', 'ta', 'tav', 'tave', 'taver', 'tavern', 'taverns']
    gg_answers_2 = [('a', 'ta'), ('ta', 'tav'), ('tav', 'tave'), ('tave', 'taver'), ('taver', 'tavern'), ('tavern', 'taverns')]
    fn_answers_2 = (['taver'], ['taverns'])
    sample_word_bank_3 = ['a', 'ha', 'ah', 'hah', 'aha', 'haha', 'ahah', 'hahah']
    gg_answers_3 = [('a', 'ha'), ('ha', 'hah'), ('hah', 'haha'), ('haha', 'hahah'), 
                    ('hah', 'ahah'), ('ahah', 'hahah'), ('ha', 'aha'), ('aha', 'haha'), 
                    ('aha', 'ahah'), ('a', 'ah'), ('ah', 'hah'), ('ah', 'aha')]
    fn_answers_3 = (['ha', 'ah'], ['haha', 'ahah'])

    print("---------------------------------------")
    print("\'generate_games\' Tests")
    print("---------------------------------------")
    gg_tests = [("a", sample_word_bank_1), ("a", sample_word_bank_2), ("a", sample_word_bank_3)]
    gg_answers = [gg_answers_1, gg_answers_2, gg_answers_3]

    for count in range(len(gg_tests)):
        student_answer = generate_games_main(gg_tests[count][0], gg_tests[count][1])
        if len(student_answer) == len(gg_answers[count]):
            passed = 'PASSED!'
            for each in (gg_answers[count]):
                if each not in student_answer:
                    passed = 'FAILED!'
                    break
        else:
            passed = 'FAILED!'
        
        print("Test #{}: {}".format(count+1, passed))
        print(f'Correct Answer: {gg_answers[count]}')
        print(f'Your Answer:    {generate_games_main(gg_tests[count][0], gg_tests[count][1])}')

    print("---------------------------------------")
    print("\'find_neighbors\' Tests")
    print("---------------------------------------")
    fn_tests = [(gg_answers_1, "cat"), (gg_answers_2, "tavern"), (gg_answers_3, "hah")]
    fn_answers = [fn_answers_1, fn_answers_2, fn_answers_3]

    for count in range(len(fn_tests)):
        student_answer = find_neighbors(fn_tests[count][0], fn_tests[count][1])
        if len(student_answer[0]) == len(fn_answers[count][0]) and len(student_answer[1]) == len(fn_answers[count][1]):
            passed = 'PASSED!'
            for each in fn_answers[count][0]:
                if each not in student_answer[0]:
                    passed = 'FAILED'
                    break
            for each in fn_answers[count][1]:
                if each not in student_answer[1]:
                    passed = 'FAILED'
                    break
        else:
            passed = 'FAILED!'
        
        print("Test #{}: {}".format(count+1, passed))
        print(f'Correct Answer: {fn_answers[count]}')
        print(f'Your Answer:    {find_neighbors(fn_tests[count][0], fn_tests[count][1])}')